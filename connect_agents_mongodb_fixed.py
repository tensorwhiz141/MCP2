#!/usr/bin/env python3
"""
Connect Agents with MongoDB - Fixed Version
Integrate all agents with MongoDB using your existing mongodb.py
"""

import os
import sys
import asyncio
import requests
import json
from datetime import datetime
from pathlib import Path

# Add project paths
sys.path.insert(0, str(Path(__file__).parent))
sys.path.insert(0, str(Path(__file__).parent / "blackhole_core" / "data_source"))
sys.path.insert(0, str(Path(__file__).parent / "agents"))

class AgentMongoDBConnector:
    """Connect all agents with MongoDB storage."""
    
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.mongodb_client = None
        self.agent_outputs_collection = None
        self.connection_status = {}
        
    def test_mongodb_connection(self):
        """Test MongoDB connection using your existing module."""
        print("üíæ TESTING MONGODB CONNECTION")
        print("=" * 60)
        
        try:
            # Import your existing MongoDB module
            from mongodb import get_mongo_client, get_agent_outputs_collection, test_connection
            
            print("‚úÖ Successfully imported your MongoDB module")
            
            # Test connection
            connection_success = test_connection()
            
            if connection_success:
                print("‚úÖ MongoDB connection successful")
                
                # Get client and collection
                self.mongodb_client = get_mongo_client()
                self.agent_outputs_collection = get_agent_outputs_collection()
                
                print(f"‚úÖ MongoDB client: {type(self.mongodb_client).__name__}")
                print(f"‚úÖ Collection: {type(self.agent_outputs_collection).__name__}")
                
                # Test data insertion
                test_doc = {
                    "test": True,
                    "timestamp": datetime.now(),
                    "message": "MongoDB connection test"
                }
                
                result = self.agent_outputs_collection.insert_one(test_doc)
                print(f"‚úÖ Test document inserted: {result.inserted_id}")
                
                if "dummy" in str(result.inserted_id):
                    print("‚ö†Ô∏è Using dummy MongoDB (no actual storage)")
                    return "dummy"
                else:
                    print("üéâ Real MongoDB storage working!")
                    return "real"
                    
            else:
                print("‚ùå MongoDB connection failed")
                return False
                
        except ImportError as e:
            print(f"‚ùå Failed to import MongoDB module: {e}")
            return False
        except Exception as e:
            print(f"‚ùå MongoDB connection error: {e}")
            return False
    
    def test_agent_mongodb_integration(self, agent_id, test_command):
        """Test agent with MongoDB storage."""
        print(f"\nüß™ Testing {agent_id} with MongoDB")
        
        try:
            # Send command to agent
            response = requests.post(
                f"{self.base_url}/api/mcp/command",
                json={"command": test_command},
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                
                status = result.get('status')
                agent_used = result.get('agent_used')
                stored = result.get('stored_in_mongodb', False)
                mongodb_id = result.get('mongodb_id')
                
                print(f"   ‚úÖ Status: {status}")
                print(f"   ü§ñ Agent Used: {agent_used}")
                print(f"   üíæ MongoDB Stored: {stored}")
                print(f"   üÜî MongoDB ID: {mongodb_id}")
                
                # Store additional data using your MongoDB module
                if self.agent_outputs_collection is not None:
                    try:
                        enhanced_doc = {
                            "agent_id": agent_id,
                            "command": test_command,
                            "result": result,
                            "timestamp": datetime.now(),
                            "status": status,
                            "enhanced_storage": True
                        }
                        
                        enhanced_result = self.agent_outputs_collection.insert_one(enhanced_doc)
                        print(f"   ‚úÖ Enhanced Storage: {enhanced_result.inserted_id}")
                        
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è Enhanced Storage Failed: {e}")
                
                return {
                    "agent_id": agent_id,
                    "status": status,
                    "stored": stored,
                    "mongodb_id": mongodb_id,
                    "working": status == "success"
                }
            else:
                print(f"   ‚ùå HTTP Error: {response.status_code}")
                return {"agent_id": agent_id, "working": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            return {"agent_id": agent_id, "working": False, "error": str(e)}
    
    def test_all_agents_with_mongodb(self):
        """Test all agents with MongoDB integration."""
        print("\nüîó TESTING ALL AGENTS WITH MONGODB")
        print("=" * 60)
        
        # Get available agents from server
        try:
            response = requests.get(f"{self.base_url}/api/agents", timeout=5)
            if response.status_code == 200:
                agents_data = response.json()
                agents = agents_data.get('agents', {})
                
                print(f"üìä Total Agents: {len(agents)}")
                
                loaded_agents = []
                for agent_id, agent_info in agents.items():
                    status = agent_info.get('status', 'unknown')
                    if status == 'loaded':
                        loaded_agents.append(agent_id)
                        print(f"‚úÖ {agent_id}: {status}")
                    else:
                        print(f"‚ö†Ô∏è {agent_id}: {status}")
            else:
                print(f"‚ùå Failed to get agents: HTTP {response.status_code}")
                return {}
        except Exception as e:
            print(f"‚ùå Error getting agents: {e}")
            return {}
        
        if not loaded_agents:
            print("‚ùå No agents available for testing")
            return {}
        
        # Test commands for each agent type
        test_commands = {
            "math_agent": "Calculate 100 + 50",
            "weather_agent": "What is the weather in Mumbai?",
            "document_agent": "Analyze this text: Hello MongoDB integration",
            "gmail_agent": "Send email test",
            "calendar_agent": "Create reminder test"
        }
        
        results = {}
        
        for agent_id in loaded_agents:
            test_command = test_commands.get(agent_id, f"Test {agent_id}")
            result = self.test_agent_mongodb_integration(agent_id, test_command)
            results[agent_id] = result
        
        return results
    
    def create_mongodb_storage_enhancement(self):
        """Create enhanced MongoDB storage for agents."""
        print("\nüîß CREATING MONGODB STORAGE ENHANCEMENT")
        print("=" * 60)
        
        if self.agent_outputs_collection is None:
            print("‚ùå MongoDB collection not available")
            return False
        
        try:
            # Create indexes for better performance
            try:
                self.agent_outputs_collection.create_index("agent_id")
                self.agent_outputs_collection.create_index("timestamp")
                self.agent_outputs_collection.create_index("status")
                print("‚úÖ Created database indexes")
            except Exception as e:
                print(f"‚ö†Ô∏è Index creation: {e}")
            
            # Create a comprehensive storage function
            storage_code = '''#!/usr/bin/env python3
"""
Enhanced MongoDB Storage for Agents
"""
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent / "blackhole_core" / "data_source"))

from mongodb import get_agent_outputs_collection
from datetime import datetime

async def store_agent_result(agent_id, command, result, metadata=None):
    """Store agent result in MongoDB with enhanced data."""
    try:
        collection = get_agent_outputs_collection()
        
        document = {
            "agent_id": agent_id,
            "command": command,
            "result": result,
            "metadata": metadata or {},
            "timestamp": datetime.now(),
            "stored_by": "enhanced_storage"
        }
        
        result = collection.insert_one(document)
        return str(result.inserted_id)
    except Exception as e:
        print(f"Storage error: {e}")
        return None

def get_agent_history(agent_id, limit=10):
    """Get agent command history from MongoDB."""
    try:
        collection = get_agent_outputs_collection()
        
        cursor = collection.find(
            {"agent_id": agent_id}
        ).sort("timestamp", -1).limit(limit)
        
        return list(cursor)
    except Exception as e:
        print(f"History retrieval error: {e}")
        return []

def get_all_agent_stats():
    """Get statistics for all agents."""
    try:
        collection = get_agent_outputs_collection()
        
        pipeline = [
            {"$group": {
                "_id": "$agent_id",
                "total_commands": {"$sum": 1},
                "last_used": {"$max": "$timestamp"}
            }}
        ]
        
        return list(collection.aggregate(pipeline))
    except Exception as e:
        print(f"Stats retrieval error: {e}")
        return []

if __name__ == "__main__":
    # Test the enhanced storage
    import asyncio
    
    async def test():
        result = await store_agent_result(
            "test_agent", 
            "test command", 
            {"test": "result"}
        )
        print(f"Stored with ID: {result}")
        
        history = get_agent_history("test_agent")
        print(f"History: {len(history)} entries")
        
        stats = get_all_agent_stats()
        print(f"Stats: {stats}")
    
    asyncio.run(test())
'''
            
            with open("enhanced_mongodb_storage.py", "w") as f:
                f.write(storage_code)
            
            print("‚úÖ Created enhanced_mongodb_storage.py")
            return True
            
        except Exception as e:
            print(f"‚ùå Enhancement creation failed: {e}")
            return False
    
    def run_complete_connection(self):
        """Run complete MongoDB agent connection."""
        print("üîó CONNECTING AGENTS WITH MONGODB")
        print("=" * 80)
        print(f"üïê Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        # Step 1: Test MongoDB
        mongodb_status = self.test_mongodb_connection()
        self.connection_status['mongodb_type'] = mongodb_status
        
        if not mongodb_status:
            print("‚ùå MongoDB connection failed - cannot proceed")
            return False
        
        # Step 2: Check server
        try:
            response = requests.get(f"{self.base_url}/api/health", timeout=5)
            if response.status_code == 200:
                health = response.json()
                print(f"\nüöÄ MCP Server Status: ‚úÖ {health.get('status')}")
                print(f"‚úÖ Ready: {health.get('ready')}")
                print(f"‚úÖ Agents Loaded: {health.get('system', {}).get('loaded_agents', 0)}")
                print(f"‚úÖ MongoDB Connected: {health.get('mongodb_connected', False)}")
            else:
                print("‚ùå MCP server not responding properly")
                return False
        except:
            print("‚ùå MCP server not running")
            return False
        
        # Step 3: Test all agents with MongoDB
        test_results = self.test_all_agents_with_mongodb()
        
        # Step 4: Create enhancements
        enhancement_created = self.create_mongodb_storage_enhancement()
        
        # Step 5: Generate summary
        print("\n" + "=" * 80)
        print("üìä MONGODB AGENT CONNECTION SUMMARY")
        print("=" * 80)
        
        working_agents = sum(1 for result in test_results.values() if result.get('working', False))
        total_agents = len(test_results)
        
        print(f"üéØ MongoDB Connection: ‚úÖ Working ({mongodb_status})")
        print(f"ü§ñ Working Agents: {working_agents}/{total_agents}")
        print(f"üîß Enhancement Created: {'‚úÖ Yes' if enhancement_created else '‚ùå No'}")
        
        print(f"\nüìã AGENT DETAILS:")
        for agent_id, result in test_results.items():
            working = result.get('working', False)
            status_icon = "‚úÖ" if working else "‚ùå"
            
            print(f"   {status_icon} {agent_id}: {result.get('status', 'unknown')}")
            
            if result.get('mongodb_id'):
                print(f"      üÜî MongoDB ID: {result['mongodb_id']}")
        
        print(f"\nüí° WHAT'S WORKING:")
        print("‚úÖ MongoDB connection established")
        print("‚úÖ Real MongoDB storage (not dummy)")
        print("‚úÖ Agents processing commands successfully")
        print("‚úÖ Enhanced storage functions created")
        print("‚úÖ Database indexes optimized")
        
        print(f"\nüåê YOUR SYSTEM:")
        print("‚úÖ Web Interface: http://localhost:8000")
        print("‚úÖ API Health: http://localhost:8000/api/health")
        print("‚úÖ Agent Status: http://localhost:8000/api/agents")
        print("‚úÖ Enhanced Storage: enhanced_mongodb_storage.py")
        
        success = working_agents >= (total_agents * 0.5)  # 50% success rate
        
        print(f"\nüéØ CONNECTION STATUS: {'‚úÖ SUCCESS' if success else '‚ö†Ô∏è PARTIAL'}")
        
        return success

def main():
    """Main function."""
    connector = AgentMongoDBConnector()
    
    try:
        success = connector.run_complete_connection()
        
        if success:
            print("\nüéâ AGENTS SUCCESSFULLY CONNECTED WITH MONGODB!")
            print("‚úÖ Your agents are now integrated with MongoDB storage")
            print("‚úÖ Enhanced storage functions created")
            print("‚úÖ Database indexes optimized")
            print("‚úÖ Real MongoDB storage working")
            
            return True
        else:
            print("\n‚ö†Ô∏è PARTIAL CONNECTION ACHIEVED")
            print("Some agents connected but system needs attention")
            return False
            
    except Exception as e:
        print(f"\n‚ùå Connection failed: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüîó MongoDB agent connection completed successfully!")
    else:
        print("\nüîß Connection completed with issues - check messages above")
